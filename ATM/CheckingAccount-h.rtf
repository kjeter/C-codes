{\rtf1\ansi\ansicpg1252\cocoartf2636
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 // Declaration of the class CheckingAccount.\
\
#include <iostream>\
using namespace std;\
\
// To Do: include any necessary headers\
#include "BankAccount.h"\
\
// To Do: Protect from multiple declarations of CheckingAccount.\
#pragma once\
\
//Class for a CheckingAccount which is derived from BankAccount.\
class CheckingAccount : public BankAccount\
\{\
public:\
	// To Do: declare three constructors like SavingAccount except use\
	// a check_fee instead of an interest_rate\
\
	// To Do: declare a constructor that takes dollar, cents and fee\
    //Initializes the account balance to $dollars.cents and the check fee to fee.\
    CheckingAccount(int dollar, int cents, double check_fee);\
    \
	// To Do: declare a constructor that takes dollar, cents and fee\
    //Initializes the account balance to $dollars.00 and check fee to the fee.\
    CheckingAccount(int dollar, double check_fee);\
\
	// To Do: declare a default constructor\
    //Initializes the account balance to $0.00 and the check fee to $0.00.\
    CheckingAccount();\
\
    // To Do: define an accessor for the check fee\
    //Returns the check fee.\
    double getFee() const;\
\
	// To Do: redefine the output function to include the check fee.\
    void output(ostream& outs) const;\
\
    //Precondition: If outs is a file output stream, then outs has already been\
    //connected to a file.\
    //Postcondition: balance and check fee have been written to the stream outs.\
 \
\
	// To Do: redefine the input function to include the check fee.\
    void input(istream& ins);\
\
    //Precondition: If ins is a file input stream, then ins has already been\
    //connected to a file.\
    //Postcondition: balance and check fee have been read from the stream ins.\
\
\
	// To Do: declare a check function that behaves like withdraw but charges\
	// the check fee too.\
    void check(int dollars, int cents = 0);\
\
    // Precondition: dollars and cents must be greater or equal to 0.\
    // Dollars and cents be less than or equal to balance.\
    // Postcondition: increase the balance by the dollars and cents\
    // plus the fee. \
\
private:\
    // To Do: additional data member(s)\
    double fee;\
\
\};\
\
}